<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>CDU Standort-Manager</title>

    <!-- Leaflet CSS und JS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>

    <!-- Lokale CSS-Datei -->
    <link rel="stylesheet" href="/style.css" />
</head>
<body>
    <h1>CDU Bottrop Standort Manager für Google Maps-Kartenlinks</h1>

    <!-- Aktuelle Uhrzeit für die kleine Karte -->
    <p id="currentTimeSmallMap"></p>
  
    <!-- Google Maps Link Eingabe und Testkarte nebeneinander -->
    <div id="map-and-link-container">
        <!-- Kleinere Karte zur Vorschau des Standorts -->
        <div id="smallMap"></div>

        <!-- Google Maps Link Eingabe -->
        <div id="google-link-container">
            <label for="googleLink">Google Maps Link:</label>
            <input type="text" id="googleLink" placeholder="Füge den Google Maps-Link ein" />
            <button id="writeButton">Schreiben</button>
        </div>
    </div>

    <img id="bottom-right-logo" src="https://cdn.glitch.global/bc29fb2b-4a21-41ef-bfdc-cf22f7020748/cdu-gesamtlogo_transparent_rgb.png?v=1728299968720" alt="CDU Logo" />

    <!-- Anzeige der Adresse unter der kleinen Karte -->
    <p id="testAddressDisplay">Adresse wird hier angezeigt...</p>

    <div id="button-container">
        <a href="/download-csv" download>CSV herunterladen</a>
        <a href="/admin">Zum Admin-Bereich</a>
    </div>

    <div id="bezirk-container">
        <h3>Bezirk auswählen:</h3>
        <label><input type="radio" id="kirchhellen" name="bezirk" value="Kirchhellen" checked> Kirchhellen</label>
        <label><input type="radio" id="mitte" name="bezirk" value="Mitte"> Mitte</label>
        <label><input type="radio" id="sued" name="bezirk" value="Süd"> Süd</label>
    </div>

    <!-- Textfeld für "Sonstiges" -->
    <label for="sonstiges">Sonstiges (optional):</label>
    <input type="text" id="sonstiges" placeholder="optional" />

    <!-- Statusmeldung -->
    <div id="statusMessage" style="display: none;"></div>

    <!-- Letzte 5 Standorte -->
    <h3>Letzte 5 Standorte</h3>
    <p id="currentTime"></p>
    <div id="lastLocations"></div>

    <!-- JavaScript zur Steuerung der Funktionen -->
    <script>
        //extraktion koordianten
        function extractCoordinates(googleMapsLink) {
            console.log("Eingehender Google Maps Link:", googleMapsLink);

            const regexAt = /@(-?\d+\.\d+),(-?\d+\.\d+)/;
            const matchAt = googleMapsLink.match(regexAt);
            if (matchAt) {
                console.log("Koordinaten aus @ Format extrahiert:", matchAt[1], matchAt[2]);
                return { lat: parseFloat(matchAt[1]), lon: parseFloat(matchAt[2]) };
            }

            console.error("Kein passendes Format für den Link gefunden.");
            return null;
        }

        // Globale Variable für die kleine Karte
        let smallMap;

        // EventListener für das Textfeld (automatisches Laden des Links)


document.getElementById('googleLink').addEventListener('input', async function() {
    const googleLink = this.value;
    const coordinates = extractCoordinates(googleLink);

    if (coordinates) {
        if (smallMap) smallMap.remove();  // Entfernt die bestehende Karte

        smallMap = L.map('smallMap').setView([coordinates.lat, coordinates.lon], 15);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(smallMap);

        const currentTime = new Date().toLocaleTimeString();
        document.getElementById('currentTimeSmallMap').innerText = `Aktuelle Uhrzeit: ${currentTime}`;

        L.marker([coordinates.lat, coordinates.lon]).addTo(smallMap)
            .bindPopup(`Standort bestätigt<br>Uhrzeit: ${currentTime}`).openPopup();
    } else {
        document.getElementById('testAddressDisplay').innerText = 'Ungültiger Google Maps Link';
    }
});




        // Funktion, um die Adresse von OpenStreetMap zu ermitteln
        async function fetchAddress(lat, lon) {
            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`);
            const data = await response.json();
            return data.display_name || 'Adresse nicht gefunden';
        }

        // Funktion, um die aktuelle Uhrzeit an zwei Stellen anzuzeigen
        function updateCurrentTime() {
            setInterval(() => {
                const currentTime = new Date().toLocaleTimeString();
                document.getElementById('currentTimeSmallMap').innerText = `Aktuelle Uhrzeit: ${currentTime}`;
                document.getElementById('currentTime').innerText = `Aktuelle Uhrzeit: ${currentTime}`;
            }, 1000);
        }

        // EventListener für Enter-Taste im Link-Feld
        document.getElementById('googleLink').addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();  // Verhindert Neuladen der Seite
                document.getElementById('writeButton').click();  // Simuliert Klick auf "Schreiben"-Knopf
            }
        });

        // EventListener für den Schreiben-Knopf
        document.getElementById('writeButton').addEventListener('click', function() {
            const googleLink = document.getElementById('googleLink').value;
            const coordinates = extractCoordinates(googleLink);
            const bezirk = document.querySelector('input[name="bezirk"]:checked').value;
            const sonstiges = document.getElementById('sonstiges').value;

            if (coordinates) {
                const data = {
                    bezirk,
                    x_coord: coordinates.lon,
                    y_coord: coordinates.lat,
                    sonstiges: sonstiges || '',
                    erstellungsdatum: new Date().toISOString().split('T')[0]  // Datum
                };

                fetch('/saveLocation', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(result => {
                    // Statusmeldung anzeigen
                    const statusMessage = document.getElementById('statusMessage');
                    statusMessage.style.display = 'block';
                    statusMessage.innerText = result.message;
                    statusMessage.style.color = 'green';

                    setTimeout(() => {
                        statusMessage.style.display = 'none';
                    }, 3000);

                    loadLastLocations();  // Letzte 5 Standorte neu laden
                    document.getElementById('googleLink').value = '';  // Textfeld leeren
                })
                .catch(error => {
                    const statusMessage = document.getElementById('statusMessage');
                    statusMessage.style.display = 'block';
                    statusMessage.innerText = 'Fehler beim Speichern des Standorts.';
                    statusMessage.style.color = 'red';

                    setTimeout(() => {
                        statusMessage.style.display = 'none';
                    }, 3000);
                });
            } else {
                alert('Bitte einen gültigen Google Maps Link eingeben.');
            }
        });

        // Funktion zum Abrufen der letzten 5 Standorte
        function loadLastLocations() {
            fetch('/last-locations')
                .then(response => response.json())
                .then(async locations => {
                    const container = document.getElementById('lastLocations');
                    container.innerHTML = '';  // Lösche alte Mini-Maps

                    for (const [index, location] of locations.entries()) {
                        const mapDiv = document.createElement('div');
                        mapDiv.id = `map-${index}`;
                        mapDiv.style.width = '200px';
                        mapDiv.style.height = '150px';
                        mapDiv.style.marginBottom = '20px';
                        container.appendChild(mapDiv);

                        const map = L.map(`map-${index}`).setView([location.y_coord, location.x_coord], 14);
                        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                            attribution: '© OpenStreetMap contributors'
                        }).addTo(map);

                        // Marker hinzufügen
                        L.marker([location.y_coord, location.x_coord]).addTo(map)
                            .bindPopup(`Uhrzeit: ${location.erstellungszeit}`).openPopup();

                        // Adresse anzeigen
                        const adresse = await fetchAddress(location.y_coord, location.x_coord);
                        const addressDisplay = document.createElement('p');
                        addressDisplay.innerText = `Adresse: ${adresse}`;
                        container.appendChild(addressDisplay);
                    }
                });
        }

        // Rufe die letzten 5 Standorte und die Uhrzeit beim Laden der Seite ab
        loadLastLocations();
        updateCurrentTime();  // Startet das regelmäßige Aktualisieren der Zeit
    </script>

    <footer id="site-footer">
        Powered by <a href="https://glitch.com" title="Glitch" target="_blank">Glitch</a> |
        Developed by Benjamin Bleske |
        Published by <a href="https://www.cdu-bottrop.de" target="_blank">2024 CDU Bottrop</a>
    </footer>
</body>
</html>
