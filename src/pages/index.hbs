<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Standort-Manager</title>

    <!-- Leaflet CSS und JS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>

    <!-- Lokale CSS-Datei -->
    <link rel="stylesheet" href="/style.css" />
</head>
<body>
    <h1>Google Maps Standort Manager</h1>

    <!-- Google Maps Link Eingabe -->
    <label for="googleLink">Google Maps Link:</label>
    <input type="text" id="googleLink" placeholder="Füge den Google Maps-Link ein" />

    <!-- Testen-Knopf zur Anzeige auf kleiner Leaflet-Karte -->
    <button id="testButton">Testen</button>
    
    <!-- Kleinere Karte zur Vorschau des Standorts -->
    <div id="smallMap" style="width: 300px; height: 200px;"></div>

    <!-- Vorauswahl des Bezirks -->
    <h3>Bezirk auswählen</h3>
    <label for="bezirk">Bezirk:</label>
    <input type="radio" id="kirchhellen" name="bezirk" value="Kirchhellen" checked> Kirchhellen
    <input type="radio" id="mitte" name="bezirk" value="Mitte"> Mitte
    <input type="radio" id="sued" name="bezirk" value="Süd"> Süd

    <!-- Schreiben-Knopf zur Übermittlung an die Datenbank -->
    <button id="writeButton">Schreiben</button>

    <!-- CSV-Download -->
    <h3>CSV-Datei herunterladen</h3>
    <a href="/download-csv" download>CSV herunterladen</a>

    <!-- Letzte 5 Standorte -->
    <h3>Letzte 5 Standorte</h3>
    <div id="lastLocations"></div> <!-- Hier werden die Mini-Maps angezeigt -->

    <!-- JavaScript zur Steuerung der Funktionen -->
    <script>
        // Extrahiert die Koordinaten aus einem Google Maps Link
  function extractCoordinates(googleMapsLink) {
  // Versuche, den einfacheren "q="-Link zu parsen
  let regexQ = /q=(-?\d+\.\d+),(-?\d+\.\d+)/;
  let matchQ = googleMapsLink.match(regexQ);
  if (matchQ) {
    return { lat: parseFloat(matchQ[1]), lon: parseFloat(matchQ[2]) };
  }

  // Versuche, den komplexeren "@"-Link zu parsen
  let regexAt = /@(-?\d+\.\d+),(-?\d+\.\d+)/;
  let matchAt = googleMapsLink.match(regexAt);
  if (matchAt) {
    return { lat: parseFloat(matchAt[1]), lon: parseFloat(matchAt[2]) };
  }

  // Wenn nichts gefunden wurde, gib null zurück
  console.error("Fehler beim Extrahieren der Koordinaten. Linkformat wird nicht unterstützt:", googleMapsLink);
  return null;
}



        // EventListener für den Test-Button
        document.getElementById('testButton').addEventListener('click', function() {
            const googleLink = document.getElementById('googleLink').value;
            const coordinates = extractCoordinates(googleLink);

            if (coordinates) {
                const map = L.map('smallMap').setView([coordinates.lat, coordinates.lon], 15);

                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '© OpenStreetMap contributors'
                }).addTo(map);

                L.marker([coordinates.lat, coordinates.lon]).addTo(map)
                    .bindPopup('Standort bestätigt').openPopup();
            } else {
                alert('Ungültiger Google Maps Link');
            }
        });

        // EventListener für den Schreiben-Button (Speicherung in der Datenbank)
        document.getElementById('writeButton').addEventListener('click', function() {
            const googleLink = document.getElementById('googleLink').value;
            const coordinates = extractCoordinates(googleLink);
            const bezirk = document.querySelector('input[name="bezirk"]:checked').value;

            if (coordinates) {
                const data = {
                    bezirk: bezirk,
                    x_coord: coordinates.lon,
                    y_coord: coordinates.lat,
                    sonstiges: 'Weitere Informationen',
                    erstellungsdatum: new Date().toISOString().split('T')[0]  // Heutiges Datum
                };

                fetch('/saveLocation', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(result => {
                    alert(result.message);
                    loadLastLocations(); // Letzte 5 Standorte nach dem Speichern neu laden
                });
            } else {
                alert('Bitte einen gültigen Link eingeben.');
            }
        });

        // Funktion zum Abrufen der letzten 5 Standorte
        function loadLastLocations() {
            fetch('/last-locations')
                .then(response => response.json())
                .then(locations => {
                    const container = document.getElementById('lastLocations');
                    container.innerHTML = ''; // Lösche alte Mini-Maps

                    locations.forEach((location, index) => {
                        const mapDiv = document.createElement('div');
                        mapDiv.id = `map-${index}`;
                        mapDiv.style.width = '200px';
                        mapDiv.style.height = '150px';
                        mapDiv.style.marginBottom = '20px';
                        container.appendChild(mapDiv);

                        const map = L.map(`map-${index}`).setView([location.y_coord, location.x_coord], 14);

                        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                            attribution: '© OpenStreetMap contributors'
                        }).addTo(map);

                        L.marker([location.y_coord, location.x_coord]).addTo(map)
                            .bindPopup(`Bezirk: ${location.bezirk}`).openPopup();
                    });
                });
        }

        // Rufe die letzten 5 Standorte beim Laden der Seite ab
        loadLastLocations();
    </script>
</body>
</html>
