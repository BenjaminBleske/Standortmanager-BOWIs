<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>CDU Standort-Manager</title>

    <!-- Leaflet CSS und JS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>

    <!-- Lokale CSS-Datei -->
    <link rel="stylesheet" href="/style.css" />
</head>
<body>
    <h1>CDU Bottrop Standort Manager für Google Maps-Kartenlinks</h1>
  
    <!-- Google Maps Link Eingabe -->
    <label for="googleLink">Google Maps Link:</label>
    <input type="text" id="googleLink" placeholder="Füge den Google Maps-Link ein" />

    <!-- Aktuelle Uhrzeit für die kleine Karte -->
    <p id="currentTimeSmallMap"></p> <!-- Dynamische Anzeige der aktuellen Uhrzeit über der kleinen Karte -->

    <!-- Testen-Knopf zur Anzeige auf kleiner Leaflet-Karte -->
    <button id="testButton">Testen</button>

    <!-- Kleinere Karte zur Vorschau des Standorts -->
    <div id="smallMap" style="width: 300px; height: 200px;"></div>
    <!-- Anzeige der Adresse unter der kleinen Karte -->
    <p id="testAddressDisplay">Adresse wird hier angezeigt...</p>
    <!-- Neues Textfeld für "Sonstiges" -->
    <label for="sonstiges">Sonstiges (optional):</label>
    <input type="text" id="sonstiges" placeholder="optional" />

    <!-- Vorauswahl des Bezirks -->
    <h3>Bezirk auswählen</h3>
    <label for="bezirk">Bezirk:</label>
    <input type="radio" id="kirchhellen" name="bezirk" value="Kirchhellen" checked> Kirchhellen
    <input type="radio" id="mitte" name="bezirk" value="Mitte"> Mitte
    <input type="radio" id="sued" name="bezirk" value="Süd"> Süd

    <!-- Schreiben-Knopf zur Übermittlung an die Datenbank -->
    <button id="writeButton">Schreiben</button>

    <!-- CSV-Download -->
    <h3>CSV-Datei herunterladen</h3>
    <a href="/download-csv" download>CSV herunterladen</a>
    <a href="/admin">Zum Admin-Bereich</a>

    <!-- Letzte 5 Standorte -->
    <h3>Letzte 5 Standorte</h3>
    <p id="currentTime"></p> <!-- Dynamische Anzeige der aktuellen Uhrzeit über den letzten 5 Standorten -->
    <div id="lastLocations"></div> <!-- Hier werden die Mini-Maps angezeigt -->

    <!-- JavaScript zur Steuerung der Funktionen -->
    <script>
        // Extrahiert die Koordinaten aus einem Google Maps Link
        function extractCoordinates(googleMapsLink) {
            console.log("Google Maps Link received:", googleMapsLink);

            let regexQ = /q=(-?\d+\.\d+),(-?\d+\.\d+)/;
            let matchQ = googleMapsLink.match(regexQ);
            if (matchQ) {
                console.log("Extracted coordinates from q= link:", matchQ);
                return { lat: parseFloat(matchQ[1]), lon: parseFloat(matchQ[2]) };
            }

            let regexAt = /@(-?\d+\.\d+),(-?\d+\.\d+)/;
            let matchAt = googleMapsLink.match(regexAt);
            if (matchAt) {
                console.log("Extracted coordinates from @ link:", matchAt);
                return { lat: parseFloat(matchAt[1]), lon: parseFloat(matchAt[2]) };
            }

            console.error("Fehler: Der Link hat das erwartete Muster nicht getroffen:", googleMapsLink);
            return null;
        }

        // Globale Variable für die kleine Karte
        let smallMap;

        // EventListener für den Test-Button

document.getElementById('testButton').addEventListener('click', async function() {
    const googleLink = document.getElementById('googleLink').value;
    const coordinates = extractCoordinates(googleLink);

    if (coordinates) {
        if (typeof smallMap !== "undefined" && smallMap !== null) {
            smallMap.remove();  // Entfernt die bestehende Karte
        }

        smallMap = L.map('smallMap').setView([coordinates.lat, coordinates.lon], 15);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(smallMap);

        // Aktuelle Uhrzeit holen
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        const seconds = now.getSeconds().toString().padStart(2, '0');
        const currentTime = `${hours}:${minutes}:${seconds}`;

        // Adresse ermitteln und nur unter der Karte anzeigen
        const adresse = await fetchAddress(coordinates.lat, coordinates.lon);
        document.getElementById('testAddressDisplay').innerText = `Adresse: ${adresse}`;
        document.getElementById('currentTimeSmallMap').innerText = `Aktuelle Uhrzeit: ${currentTime}`;

        // Füge nur den Marker auf der Karte hinzu (ohne Adresse im Popup)
        L.marker([coordinates.lat, coordinates.lon]).addTo(smallMap)
            .bindPopup(`Standort bestätigt<br>Uhrzeit: ${currentTime}`).openPopup();
    } else {
        alert('Ungültiger Google Maps Link');
    }
});

// Funktion, um die Adresse von OpenStreetMap zu ermitteln
async function fetchAddress(lat, lon) {
    const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`);
    const data = await response.json();
    return data.display_name || 'Adresse nicht gefunden';
}



        // Funktion, um die aktuelle Uhrzeit an zwei Stellen anzuzeigen
        function updateCurrentTime() {
            setInterval(() => {
                const now = new Date();  // Verwende die lokale Zeit ohne manuelle Verschiebung
                const hours = now.getHours().toString().padStart(2, '0');
                const minutes = now.getMinutes().toString().padStart(2, '0');
                const seconds = now.getSeconds().toString().padStart(2, '0');
                
                // Aktualisiere die Uhrzeit für die kleine Karte
                const currentTimeElementSmallMap = document.getElementById('currentTimeSmallMap');
                if (currentTimeElementSmallMap) {
                    currentTimeElementSmallMap.innerText = `Aktuelle Uhrzeit: ${hours}:${minutes}:${seconds}`;
                }

                // Aktualisiere die Uhrzeit für die letzten 5 Standorte
                const currentTimeElement = document.getElementById('currentTime');
                if (currentTimeElement) {
                    currentTimeElement.innerText = `Aktuelle Uhrzeit: ${hours}:${minutes}:${seconds}`;
                }
            }, 1000); // Aktualisierung alle 1000 Millisekunden (1 Sekunde)
        }
      
      document.getElementById('writeButton').addEventListener('click', function() {
    const googleLink = document.getElementById('googleLink').value;
    const coordinates = extractCoordinates(googleLink);
    const bezirk = document.querySelector('input[name="bezirk"]:checked').value;
    const sonstiges = document.getElementById('sonstiges').value;  // Sonstiges eingeben

    if (coordinates) {
        const data = {
            bezirk: bezirk,
            x_coord: coordinates.lon,
            y_coord: coordinates.lat,
            sonstiges: sonstiges || '',  // Falls leer, wird ein leerer String gesendet
            erstellungsdatum: new Date().toISOString().split('T')[0]  // Datum
        };

        console.log("Sending data to server:", data); // Debugging

        fetch('/saveLocation', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(result => {
            alert(result.message);
            loadLastLocations(); // Letzte 5 Standorte nach dem Speichern neu laden
            document.getElementById('googleLink').value = ''; // Textfeld nach dem Speichern leeren
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Fehler beim Speichern des Standorts.');
        });
    } else {
        alert('Bitte einen gültigen Google Maps Link eingeben.');
    }
});



 // Funktion zum Abrufen der letzten 5 Standorte
function loadLastLocations() {
    fetch('/last-locations')
        .then(response => response.json())
        .then(async locations => {
            const container = document.getElementById('lastLocations');
            container.innerHTML = ''; // Lösche alte Mini-Maps

            for (const [index, location] of locations.entries()) {
                const mapDiv = document.createElement('div');
                mapDiv.id = `map-${index}`;
                mapDiv.style.width = '200px';
                mapDiv.style.height = '150px';
                mapDiv.style.marginBottom = '20px';
                container.appendChild(mapDiv);

                const map = L.map(`map-${index}`).setView([location.y_coord, location.x_coord], 14);

                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '© OpenStreetMap contributors'
                }).addTo(map);

                // Füge den Marker hinzu (ohne Adresse im Popup, nur Uhrzeit)
                L.marker([location.y_coord, location.x_coord]).addTo(map)
                    .bindPopup(`Uhrzeit: ${location.erstellungszeit}`).openPopup();

                // Ermittele die Adresse und zeige sie unter der Karte an
                const adresse = await fetchAddress(location.y_coord, location.x_coord);
                const addressDisplay = document.createElement('p');
                addressDisplay.innerText = `Adresse: ${adresse}`;
                container.appendChild(addressDisplay); // Zeige die Adresse unter der Karte an
            }
        });
}

// Funktion, um die Adresse von OpenStreetMap zu ermitteln (gleiche wie zuvor)
async function fetchAddress(lat, lon) {
    const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`);
    const data = await response.json();
    return data.display_name || 'Adresse nicht gefunden';
}


        // Rufe die letzten 5 Standorte beim Laden der Seite ab
        loadLastLocations();
        updateCurrentTime();  // Aktualisiert die Uhrzeit im Frontend an beiden Stellen

    </script>
</body>
</html>
